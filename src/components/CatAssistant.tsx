import { useState, useEffect, useCallback } from 'react';

interface CatAssistantProps {
  playSound?: () => void;
}

type CatMood = 'happy' | 'greeting' | 'playful' | 'satisfied' | 'excited' | 'sleepy';
type CatPose = 'sitting' | 'waving' | 'jumping' | 'sleeping' | 'thinking';

const CAT_PHRASES = {
  scroll: [
    '–° —Ç–∞–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Ç—ã –∑–∞—Ä–∞–±–æ—Ç–∞–µ—à—å –º–∏–ª–ª–∏–æ–Ω –≤ —à—É—Ç–∫—É!',
    '–ú—è—É! –í–∏–∂—É, –∞–∫—Ç–∏–≤–Ω–æ –∏–∑—É—á–∞–µ—à—å –Ω–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!',
    '–î–µ—Ä–∂–∏ —Ö–≤–æ—Å—Ç –ø–∏—Å—Ç–æ–ª–µ—Ç–æ–º, —Å–∫—Ä–æ–ª–ª –∏–¥—ë—Ç –æ—Ç–ª–∏—á–Ω–æ!',
    '–ë—ã—Å—Ç—Ä–æ –ª–∏—Å—Ç–∞–µ—à—å? –ù–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã —Ç–æ–∂–µ –±—ã—Å—Ç—Ä—ã–µ!'
  ],
  products: [
    '–í–∏–∂—É, —Ç—ã –Ω–∞–≤–æ–¥–∏—à—å –ø–æ—Ä—è–¥–æ–∫ –≤ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö ‚Äî –º—É—Ä–ª—ã—á—É –æ—Ç —Ä–∞–¥–æ—Å—Ç–∏!',
    '–î–µ—Ä–∂–∏ —Ö–≤–æ—Å—Ç –ø–∏—Å—Ç–æ–ª–µ—Ç–æ–º, —É –Ω–∞—Å —Ç—É—Ç –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!',
    '–≠—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –ø—Ä—è–º–æ –∫–∞–∫ —Ä—ã–±–∫–∞ ‚Äî –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç–æ—è—Ç—å!'
  ],
  memes: [
    '–•–∞-—Ö–∞! –≠—Ç–∏ –º–µ–º—ã –ª—É—á—à–µ –∫–æ—Ç–∏–∫–æ–≤ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ!',
    '–°–º–µ—è—Ç—å—Å—è –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è... –∏ –∫–æ—à–µ–ª—å–∫–∞!',
    '–ú—è—É! –î–∞–∂–µ —è –Ω–µ –º–æ–≥—É —Å–¥–µ—Ä–∂–∞—Ç—å —Å–º–µ—Ö!'
  ],
  contacts: [
    '–ü–æ—Ä–∞ –æ—Ç–∫—Ä—ã—Ç—å —Å—á—ë—Ç‚Ä¶ –∏–ª–∏ —Ö–æ—Ç—è –±—ã –ø–æ—Å–º–µ—è—Ç—å—Å—è!',
    '–ú—è—É! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —É—Å–ª—É–≥!',
    '–ù–∞—à –∫–æ—Ç –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–∂–µ —Ç–≤–æ–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤!'
  ],
  advantages: [
    '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–∞–∫ —É –∫–æ—Ç–∞ ‚Äî –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–∑–µ–º–ª—è–µ–º—Å—è –Ω–∞ –ª–∞–ø—ã!',
    '–ú—É—Ä—Ä! –í—ã–≥–æ–¥–∞ –æ—á–µ–≤–∏–¥–Ω–∞ –¥–∞–∂–µ –¥–ª—è –∫–æ—à–∞—á—å–∏—Ö –º–æ–∑–≥–æ–≤!',
    '–Ø –± —Å–∞–º –æ—Ç–∫—Ä—ã–ª —Å—á—ë—Ç, –Ω–æ –ª–∞–ø—ã –Ω–µ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∏!'
  ],
  default: [
    '–ú—è—É! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–∏–§–∏ –±–∞–Ω–∫!',
    '–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç!',
    '–ù–∞—à –∫–æ—Ç –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–∂–µ —Ç–≤–æ–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!'
  ]
};

export default function CatAssistant({ playSound }: CatAssistantProps) {
  const [isVisible, setIsVisible] = useState(false);
  const [currentPhrase, setCurrentPhrase] = useState('');
  const [showBubble, setShowBubble] = useState(false);
  const [catMood, setCatMood] = useState<CatMood>('happy');
  const [catPose, setCatPose] = useState<CatPose>('sitting');
  const [currentSection, setCurrentSection] = useState('default');

  const showRandomPhrase = useCallback((section: string) => {
    const phrases = CAT_PHRASES[section as keyof typeof CAT_PHRASES] || CAT_PHRASES.default;
    const randomPhrase = phrases[Math.floor(Math.random() * phrases.length)];
    setCurrentPhrase(randomPhrase);
    setShowBubble(true);
    
    // –ó–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç
    if (playSound) {
      playSound();
    }

    // –°–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      setShowBubble(false);
    }, 4000);
  }, [playSound]);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π
  useEffect(() => {
    let scrollTimeout: NodeJS.Timeout;
    let lastScrollTime = Date.now();

    const handleScroll = () => {
      const scrollY = window.scrollY;
      
      // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ç–∞ –ø–æ—Å–ª–µ —Å–∫—Ä–æ–ª–ª–∞ –Ω–∞ 200px
      if (scrollY > 200 && !isVisible) {
        setIsVisible(true);
        setCatPose('waving');
        setCatMood('greeting');
        showRandomPhrase('default');
        
        setTimeout(() => {
          setCatPose('sitting');
          setCatMood('happy');
        }, 2000);
      }

      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–µ–∫—Ü–∏–∏
      const sections = ['hero', 'products', 'memes', 'advantages', 'contacts'];
      let activeSection = 'default';

      for (const section of sections) {
        const element = document.getElementById(section);
        if (element) {
          const rect = element.getBoundingClientRect();
          if (rect.top <= window.innerHeight / 2 && rect.bottom >= window.innerHeight / 2) {
            activeSection = section;
            break;
          }
        }
      }

      // –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–º–µ–Ω—É —Å–µ–∫—Ü–∏–∏
      if (activeSection !== currentSection && isVisible) {
        setCurrentSection(activeSection);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –ø–æ–∑—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ–∫—Ü–∏–∏
        switch (activeSection) {
          case 'products':
            setCatMood('satisfied');
            setCatPose('thinking');
            break;
          case 'memes':
            setCatMood('playful');
            setCatPose('jumping');
            break;
          case 'advantages':
            setCatMood('excited');
            setCatPose('waving');
            break;
          case 'contacts':
            setCatMood('greeting');
            setCatPose('waving');
            break;
          default:
            setCatMood('happy');
            setCatPose('sitting');
        }

        showRandomPhrase(activeSection);
      }

      // –†–µ–∞–∫—Ü–∏—è –Ω–∞ –±—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–æ–ª–ª
      const now = Date.now();
      if (now - lastScrollTime > 100) { // –ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–æ–ª–ª
        clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(() => {
          if (isVisible && Math.random() > 0.7) { // 30% —à–∞–Ω—Å
            setCatPose('jumping');
            showRandomPhrase('scroll');
            
            setTimeout(() => {
              setCatPose('sitting');
            }, 1500);
          }
        }, 500);
      }
      lastScrollTime = now;
    };

    window.addEventListener('scroll', handleScroll);
    return () => {
      window.removeEventListener('scroll', handleScroll);
      clearTimeout(scrollTimeout);
    };
  }, [isVisible, currentSection, showRandomPhrase]);

  // –†–µ–Ω–¥–µ—Ä –∫–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –ø–æ–∑—ã
  const renderCat = () => {
    const baseClasses = "text-6xl transition-all duration-500 transform select-none";
    
    let catEmoji = 'üò∏';
    let transform = '';
    
    switch (catMood) {
      case 'happy':
        catEmoji = 'üò∏';
        break;
      case 'greeting':
        catEmoji = 'üò∫';
        break;
      case 'playful':
        catEmoji = 'üòπ';
        break;
      case 'satisfied':
        catEmoji = 'üòª';
        break;
      case 'excited':
        catEmoji = 'üôÄ';
        break;
      case 'sleepy':
        catEmoji = 'üò¥';
        break;
    }

    switch (catPose) {
      case 'waving':
        transform = 'rotate-12 scale-110';
        break;
      case 'jumping':
        transform = 'translateY-4 scale-125';
        break;
      case 'sleeping':
        transform = 'rotate-45';
        break;
      case 'thinking':
        transform = 'rotate-6';
        break;
      default:
        transform = '';
    }

    return (
      <div className={`${baseClasses} ${transform}`}>
        {catEmoji}
      </div>
    );
  };

  if (!isVisible) return null;

  return (
    <div className="fixed bottom-6 right-6 z-50 flex flex-col items-end">
      {/* –†–µ—á–µ–≤–æ–π –ø—É–∑—ã—Ä—å */}
      {showBubble && currentPhrase && (
        <div className="mb-4 max-w-xs animate-in slide-in-from-right duration-300">
          <div className="bg-white border-2 border-fun-blue rounded-2xl px-4 py-3 shadow-lg relative">
            <p className="text-sm text-gray-800 font-medium">{currentPhrase}</p>
            
            {/* –•–≤–æ—Å—Ç–∏–∫ –ø—É–∑—ã—Ä—è */}
            <div className="absolute -bottom-2 right-6 w-4 h-4 bg-white border-r-2 border-b-2 border-fun-blue transform rotate-45"></div>
          </div>
        </div>
      )}

      {/* –ö–æ—Ç */}
      <div 
        className="bg-gradient-to-br from-fun-yellow/20 to-fun-blue/20 rounded-full p-3 cursor-pointer hover:scale-110 transition-all duration-300 shadow-lg backdrop-blur-sm border border-white/30"
        onClick={() => {
          setCatPose('jumping');
          showRandomPhrase(currentSection);
          setTimeout(() => setCatPose('sitting'), 1000);
        }}
        onMouseEnter={() => {
          setCatMood('excited');
          setCatPose('waving');
        }}
        onMouseLeave={() => {
          setCatMood('happy');
          setCatPose('sitting');
        }}
      >
        {renderCat()}
      </div>

      {/* –ú–∏–≥–∞—é—â–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã */}
      <div className="absolute -top-2 -right-2 w-3 h-3 bg-fun-yellow rounded-full animate-ping opacity-60"></div>
      <div className="absolute -bottom-1 -left-1 w-2 h-2 bg-fun-blue rounded-full animate-pulse"></div>
    </div>
  );
}