import { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import Icon from "@/components/ui/icon";

interface JokeModalProps {
  isOpen: boolean;
  onClose: () => void;
  playSound: () => void;
}

const jokes = [
  {
    text: "–ü–æ—á–µ–º—É –±–∞–Ω–∫–∏—Ä—ã –Ω–æ—Å—è—Ç –æ—á–∫–∏? –ü–æ—Ç–æ–º—É —á—Ç–æ –∏–º –Ω—É–∂–Ω–æ –≤–∏–¥–µ—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã! ü§ì",
    emoji: "ü§ì",
    animation: "animate-bounce"
  },
  {
    text: "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±–∞–Ω–∫–µ? –ö—Ä–µ–¥–∏—Ç–Ω—ã–π –∫–æ—Ç—ç! üò∏",
    emoji: "üò∏",
    animation: "animate-pulse"
  },
  {
    text: "–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –±–∞–Ω–∫–æ–º–∞—Ç, –∫–æ–≥–¥–∞ —É –≤–∞—Å –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –¥–µ–Ω—å–≥–∏? '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!' üëã",
    emoji: "üëã",
    animation: "animate-wiggle"
  },
  {
    text: "–ü–æ—á–µ–º—É –¥–µ–ø–æ–∑–∏—Ç –≤—Å–µ–≥–¥–∞ —Å–ø–æ–∫–æ–µ–Ω? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –ø–æ–¥ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏! üòå",
    emoji: "üòå",
    animation: "animate-spin"
  },
  {
    text: "–ö–∞–∫ –±–∞–Ω–∫–∏—Ä –≥–æ–≤–æ—Ä–∏—Ç '–ø—Ä–∏–≤–µ—Ç'? '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤!' üí∞",
    emoji: "üí∞",
    animation: "animate-ping"
  }
];

export default function JokeModal({ isOpen, onClose, playSound }: JokeModalProps) {
  const [currentJoke, setCurrentJoke] = useState(jokes[0]);
  const [isAnimating, setIsAnimating] = useState(false);

  useEffect(() => {
    if (isOpen) {
      const randomJoke = jokes[Math.floor(Math.random() * jokes.length)];
      setCurrentJoke(randomJoke);
      setIsAnimating(true);
      playSound();
      
      setTimeout(() => setIsAnimating(false), 1000);
    }
  }, [isOpen, playSound]);

  const getNewJoke = () => {
    const randomJoke = jokes[Math.floor(Math.random() * jokes.length)];
    setCurrentJoke(randomJoke);
    setIsAnimating(true);
    playSound();
    
    setTimeout(() => setIsAnimating(false), 1000);
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className={`bg-white rounded-3xl p-8 max-w-md w-full shadow-2xl transform transition-all duration-500 ${
        isOpen ? 'scale-100 opacity-100' : 'scale-95 opacity-0'
      }`}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-6">
          <div className={`text-6xl mb-4 ${isAnimating ? currentJoke.animation : ''}`}>
            {currentJoke.emoji}
          </div>
          <h2 className="text-2xl font-bold bg-gradient-to-r from-fun-blue to-fun-yellow bg-clip-text text-transparent">
            –®—É—Ç–∫–∞ –¥–Ω—è –æ—Ç –§–∏–§–∏ –±–∞–Ω–∫–∞! üé≠
          </h2>
        </div>

        {/* –®—É—Ç–∫–∞ */}
        <div className="bg-gradient-to-r from-fun-blue/10 to-fun-yellow/10 rounded-2xl p-6 mb-6">
          <p className="text-lg text-center text-gray-700 leading-relaxed">
            {currentJoke.text}
          </p>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ */}
        <div className="flex flex-col sm:flex-row gap-3">
          <Button 
            onClick={getNewJoke}
            className="flex-1 bg-gradient-to-r from-fun-yellow to-fun-orange hover:from-fun-orange hover:to-fun-yellow transform hover:scale-105 transition-all duration-300"
          >
            <Icon name="RefreshCw" className="w-4 h-4 mr-2" />
            –ï—â—ë —à—É—Ç–∫—É! üòÇ
          </Button>
          <Button 
            onClick={onClose}
            variant="outline"
            className="flex-1 border-fun-blue text-fun-blue hover:bg-fun-blue hover:text-white transform hover:scale-105 transition-all duration-300"
          >
            <Icon name="X" className="w-4 h-4 mr-2" />
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        </div>

        {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */}
        <div className="absolute -top-2 -right-2 w-4 h-4 bg-fun-yellow rounded-full animate-ping"></div>
        <div className="absolute -bottom-2 -left-2 w-3 h-3 bg-fun-blue rounded-full animate-pulse"></div>
      </div>
    </div>
  );
}